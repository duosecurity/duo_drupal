<?php

/**
 *  @file
 *  A module to add Duo's two factor authentication to the login process.
 */

  require_once('duo.php');
  require_once('duo_web.php');


/**
 *  Implements hook_user
 */
  function duo_user($op, &$edit, &$account, $category = NULL) {
    if ($op == "login") {
      if (isset($_SERVER['REQUEST_URI'])) {
        $action = $_SERVER['REQUEST_URI'];
        $search = "/\/user\/reset\/" . $account->uid . "/";
        $action = preg_match($search, $action);
      }
      
      if (duo_generate_second_auth($account->name, $action)) {
        exit();
      }
    }
  }


/**
 *  Function to generate the secondary authentication form
 *
 *  @param $name
 *    The username of the user trying to log in.
 *
 *  @return boolean
 *    returns true on success, false otherwise.
 */
  function duo_generate_second_auth($name, $action){
    $skey = variable_get('duo_secretkey', '');
    $ikey = variable_get('duo_integrationkey', '');
    $akey = variable_get('duo_applicationkey', '');
    $api  = variable_get('duo_apihostname', '');

    // Sanity check for variables before signRequest is called.
    if (!($skey && $ikey && $akey && $api)) {
      return FALSE;
    }
    
    global $user;
    $user = drupal_anonymous_user();
    session_destroy();

    $duo = new Duo();
    $sig_req = $duo->signRequest($ikey, $skey, $akey, $name);

    echo _duo_generate_page($sig_req, $api, $action);
    return TRUE;
  }

/**
 *  Callback function for testing the Drupal settings.
 */
  function duo_preview_second_auth(){
    include('duo_strings.php');
    global $user;
    if (duo_generate_second_auth($user->name)) {
      exit();
    }
    echo $duo_error['bad_configuration'];
  }

/**
 *  Logs the user from the Duo form post
 *
 *  Actually processes the login information, and 
 *  loads a user account if successful.
 */
  function duo_login_process() {
    include('duo_strings.php');
    
    $sig_resp = trim($_POST['sig_response']);
    $action = trim($_POST['reset']);
    if (!$sig_resp) {
      drupal_set_message($duo_error['tfa_not_recieved'], 'error' );
      drupal_goto();
    }

    // Verify the response signature
    $duo = new Duo();
    $skey = variable_get('duo_secretkey', '');
    $ikey = variable_get('duo_integrationkey', '');
    $akey = variable_get('duo_applicationkey', '');

    $name = $duo->verifyResponse($ikey, $skey, $akey, $sig_resp);
    if (!$name) {
      drupal_set_message($duo_error['tfa_invalid'], 'error' );
      drupal_goto();
    }

    global $user;
    $user = user_load(array('name' => $name));
    sess_regenerate();
    
    if ($action == true) {
        drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password.'));
        drupal_goto("user/" . $user->uid . "/edit");
    }
    drupal_goto();
  }


/**
 *  Administration  /  Navigation type functions.
 *
 *  The following functions are for menu items, help text and other functions that aren't critical to authenticating
 *  or processing user credentials.
 *
 *  @see duo_help()
 *  @see duo_admin_config()
 *  @see duo_menu()
 *  @see duo_permission()
 */


/**
 *  Implements hook_help.
 */
  function duo_help($path, $arg) {
    switch ($path) {
      case "admin/help#duo":
        return _duo_generate_help();
        break;
    }
  }


/**
 * Implements hook_admin_config
 */
  function duo_admin_config() {
    include('duo_strings.php');

    if (!function_exists("hash_hmac")) {
      drupal_set_message($duo_error['php_invalid'], 'error');
    }

    $form['duo_integrationkey'] = array(
      '#type' => 'textfield',
      '#title' => $duo_titles['integration_key'],
      '#default_value' => variable_get('duo_integrationkey', ''),
      '#description' => $duo_descriptions['integration_key'],
      '#required' => TRUE,
    );

    $form['duo_secretkey'] = array(
      '#type' => 'textfield',
      '#title' => $duo_titles['secret_key'],
      '#default_value' => variable_get('duo_secretkey', ''),
      '#description' => $duo_descriptions['secret_key'],
      '#required' => TRUE,
    );

    $form['duo_apihostname'] = array(
      '#type' => 'textfield',
      '#title' => $duo_titles['api_hostname'],
      '#default_value' => variable_get('duo_apihostname', ''),
      '#description' => $duo_descriptions['api_hostname'],
      '#required' => TRUE,
    );
    
    // Attempt to load a Duo iframe to show if it has been configured properly.
    $ikey = variable_get('duo_integrationkey', '');
    $skey = variable_get('duo_secretkey', '');
    $api  = variable_get('duo_apihostname', '');

    if ($ikey && $skey && $api) {
      $form['preview'] = array(
        '#type' => 'item',
        '#title' => $duo_titles['form_preview'],
        '#value' => '<a href="' . url("duo_preview", array('absolute' => TRUE)) . '">' . $duo_titles['preview_url'] . '</a>',
        '#description' => $duo_descriptions['form_preview'],
      );
    }

    return system_settings_form($form);
  }

/**
 *  Validates the admin config form.
 */
  function duo_admin_config_validate($form, &$form_state) {
    include('duo_strings.php');

    $ikey = trim($form_state['values']['duo_integrationkey']);
    $skey = trim($form_state['values']['duo_secretkey']);
    $api  = trim($form_state['values']['duo_apihostname']);

    // Verify the ikey length.
    if (drupal_strlen($ikey) != 20) {
      form_set_error('duo_integrationkey', $duo_error['invalid_ikey']);
    }
    // Verify skey length.
    if (drupal_strlen($skey) != 40) {
      form_set_error('duo_secretkey', $duo_error['invalid_skey']);
    }
    // Make sure url is at least long enough to be valid.
    if (drupal_strlen($api) < 15) {
      form_set_error('duo_apihostname', $duo_error['short_api']);
    }

    $form_state['values']['duo_integrationkey'] = $ikey;
    $form_state['values']['duo_secretkey']      = $skey;
    $form_state['values']['duo_apihostname']    = $api;
  }

/**
 * Implements hook_menu().
 */
  function duo_menu() {
    include('duo_strings.php');
    $items = array();

    $items['admin/settings/duo'] = array(
       'title' => $duo_titles['config_form'],
       'description' => $duo_descriptions['config_form'],
       'page callback' => 'drupal_get_form',
       'page arguments' => array('duo_admin_config'),
       'access arguments' => array('administer users'),
       'type' => MENU_NORMAL_ITEM,
    );

    $items['duo_preview'] = array(
      'page callback' => 'duo_preview_second_auth',
      'access arguments' => array('administer users'),
      'type' => MENU_CALLBACK,
    );

    $items['duo_login_process'] = array(
       'page callback' => 'duo_login_process',
       'access callback' => TRUE,
       'type' => MENU_CALLBACK
    );

    return $items;
  }

/**
 * Implements hook_perm().
 */
  function duo_perm() {
    return array('log in with duo');
  }
